generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String?
  role                  String    @default("user")
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  profile               Profile?
  bookingsAsClient      Booking[] @relation("ClientBookings")
  bookingsAsProvider    Booking[] @relation("ProviderBookings")
  accounts              Account[]
  sessions              Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String  @id @default(cuid())
  userId          String  @unique
  name            String
  gender          String?
  age             Int?
  location        String?
  profilePicture  String?
  specialization  String?
  hourlyRate      Float?
  availableTimes  Json?
  bio             String?
  
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  providerId  String
  date        DateTime
  time        String
  status      String   @default("pending")
  notes       String?
  
  user        User     @relation("ClientBookings", fields: [userId], references: [id], onDelete: Cascade)
  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([providerId])
  @@index([date])
}
