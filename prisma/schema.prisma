generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String?
  role                  Role      @default(chw)
  status                UserStatus @default(pending_verification)
  phone                 String?   @unique
  facilityId            String?
  languagePref          Language  @default(en)
  professionalId        String?
  documentUrls          Json?
  emailVerified         DateTime?
  image                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  profile               Profile?
  bookingsAsClient      Booking[] @relation("ClientBookings")
  bookingsAsProvider    Booking[] @relation("ProviderBookings")
  referralsCreated      Referral[] @relation("ReferralCreatedBy")
  referralsAsPatient    Referral[] @relation("ReferralPatient")
  recordsCreated        MedicalRecord[] @relation("RecordCreatedBy")
  recordsAsPatient      MedicalRecord[] @relation("RecordPatient")
  accounts              Account[]
  sessions              Session[]
}

enum Role {
  doctor
  nurse
  pharmacist
  facility_admin
  moh
  chw
  super_admin
  cms
}

enum UserStatus {
  pending_verification
  active
  suspended
  rejected
}

enum Language {
  en
  tn
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  firstName       String
  lastName        String
  gender          String?
  dateOfBirth     DateTime?
  location        String?
  district        String?
  profilePicture  String?
  specialization  String?
  bio             String?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  providerId  String
  date        DateTime
  time        String
  status      String   @default("pending")
  notes       String?
  equipmentId String?
  referralId  String?
  recordId    String?
  
  user        User     @relation("ClientBookings", fields: [userId], references: [id], onDelete: Cascade)
  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id], onDelete: Cascade)
  equipment   Equipment? @relation(fields: [equipmentId], references: [id])
  referral    Referral?  @relation(fields: [referralId], references: [id])
  record      MedicalRecord? @relation(fields: [recordId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([providerId])
  @@index([date])
}

model Equipment {
  id          String   @id @default(cuid())
  facilityId  String
  name        String
  type        String
  status      String   @default("available")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings    Booking[]
}

model Referral {
  id            String   @id @default(cuid())
  createdById   String
  patientUserId String
  targetFacilityId String?
  reason        String
  status        String   @default("open")
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  createdBy     User     @relation("ReferralCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  patient       User     @relation("ReferralPatient", fields: [patientUserId], references: [id], onDelete: Cascade)
  bookings      Booking[]

  @@index([patientUserId])
}

model MedicalRecord {
  id            String   @id @default(cuid())
  patientUserId String
  createdById   String
  type          String
  summary       String?
  data          Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  patient       User     @relation("RecordPatient", fields: [patientUserId], references: [id], onDelete: Cascade)
  createdBy     User     @relation("RecordCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  bookings      Booking[]

  @@index([patientUserId])
}
